(0) grammar python 2.7

(1) simple_fe.py
1. 
“””strip & split“””
ipaddr = "10.122.19.10"
print(ipaddr.strip())
“””
outputs: 10.122.19.10
“””
ipaddr = "10.122.19.10"
print(ipaddr.split())
“””
outputs: [’10.122.19.10']
“””
ipaddr = "10.122.19.10"
print(ipaddr.split('.'))
“””
['10', '122', '19', '10']
“””
ipaddr = "10.122.19.10"
print(ipaddr.strip().split('.'))
“””
['10', '122', '19', '10']
“””

2.
“””method1“””
def read_file(filename):
    r"""Assume the file is the format
    word \t tag
    word \t tag
    [[blank line separates sentences]]
    
    This function reads the file and returns a list of sentences.  each
    sentence is a pair (tokens, tags), each of which is a list of strings of
    the same length.
    """
    sentences = open(filename).read().strip().split("\n\n")
    ret = []
    for sent in sentences:
        lines = sent.split("\n")
        pairs = [L.split("\t") for L in lines]
        tokens = [tok for tok,tag in pairs]
        tags = [tag for tok,tag in pairs]
        ret.append( (tokens,tags) )
    return ret

print(read_file("test.txt"))
“””outputs:
[(['@paulwalk', 'It', "'s", 'the'], ['O', 'O', 'O', 'O']), (['From', 'Green', 'Newsfeed'], ['O', 'O', 'O']), (['Pxleyes', 'Top', '50', 'Photography', '#photography'], ['B', 'O', 'O', 'O', 'O']), (['today', 'is'], ['O', 'O']), (['party', 'party', '.', '&lt;', '3'], ['O', 'O', 'O', 'O', 'O'])]“””

3.
string.replace(s, old, new[, maxreplace])
Return a copy of string s with all occurrences of substring old replaced by new. If the optional argument maxreplace is given, the first maxreplace occurrences are replaced.

4.
“””%s %d outputs“””
("word=%s" % w)
“””
outputs:
'word=p'
“””
%s,表示格化式一个对象为字符
%d,整数
"Hello, %s" % "zhang3"
>>> "Hello, zhang3"
"%s:%d" % ("ab",3)
>>> "ab:3"
"%d" % 33 
>>> ”33"

5.
def read_file(filename):
    r"""Assume the file is the format
    word \t tag
    word \t tag
    [[blank line separates sentences]]
    
    This function reads the file and returns a list of sentences.  each
    sentence is a pair (tokens, tags), each of which is a list of strings of
    the same length.
    """
    sentences = open(filename).read().strip().split("\n\n")
    ret = []
    for sent in sentences:
        lines = sent.split("\n")
        pairs = [L.split("\t") for L in lines]
        tokens = [tok for tok,tag in pairs]
        tags = [tag for tok,tag in pairs]
        ret.append( (tokens,tags) )
    return ret

def clean_str(s):
    """Clean a word string so it doesn't contain special crfsuite characters"""
    return s.replace(":","_COLON_").replace("\\", "_BACKSLASH_")

def extract_features_for_sentence1(tokens):
    N = len(tokens)
    feats_per_position = [set() for i in range(N)]
    for t in range(N):
        w = clean_str(tokens[t])
        feats_per_position[t].add("word=%s" % w)
    return feats_per_position

sents = read_file("test.txt")
for tokens,goldtags in sents:
    feats = extract_features_for_sentence1(tokens)
    """
    for t in range(len(tokens)):
        feats_tabsep = "\t".join(feats[t])
        print ("%s\t%s" % (goldtags[t], feats_tabsep))
    """
    print(feats)
“””
outputs:
[{'word=@paulwalk'}, {'word=It'}, {"word='s"}, {'word=the'}]
[{'word=From'}, {'word=Green'}, {'word=Newsfeed'}]
[{'word=Pxleyes'}, {'word=Top'}, {'word=50'}, {'word=Photography'}, {'word=#photography'}]
[{'word=today'}, {'word=is'}]
[{'word=party'}, {'word=party'}, {'word=.'}, {'word=&lt;'}, {'word=3'}]
“””

def extract_features_for_sentence1(tokens):
    N = len(tokens)
    feats_per_position = [set() for i in range(N)]
    for t in range(N):
        feats_per_position[t].add("word=%s" % tokens[t])
    return feats_per_position

tokens = ['party', 'party', '.', '&lt;', '3']
print(extract_features_for_sentence1(tokens))
“”“
outputs: [set(['word=party']), set(['word=party']), set(['word=.']), set(['word=&lt;']), set(['word=3'])]
”“”

6.
sents = read_file("test.txt")
for tokens,goldtags in sents:
    feats = extract_features_for_sentence1(tokens)
    for t in range(len(tokens)):
        feats_tabsep = "\t".join(feats[t])
        print ("%s\t%s" % (goldtags[t], feats_tabsep))
“””
outputs:
O	word=@paulwalk
O	word=It
O	word='s
O	word=the
O	word=From
O	word=Green
O	word=Newsfeed
B	word=Pxleyes
O	word=Top
O	word=50
O	word=Photography
O	word=#photography
O	word=today
O	word=is
O	word=party
O	word=party
O	word=.
O	word=&lt;
O	word=3
“””

(2) evaluation
1.
Precision is the number of correct name predictions, divided by the number of name predictions the tagger made. Precision goes down if you make lots of false positives.
Recall is the number of correct name predictions, divided by the number of names in the gold standard.
F-score is the average (specifically, the harmonic mean) of precision and recall.

2.
A false positive is where the tagger predicted a name, but there actually is no name in the gold standard. 
A false negative is where the gold standard has a name, but your tagger did not predict a name.
Precision is the ratio of true positives (tp) to all predicted positives (tp + fp). 
Recall is the ratio of true positives to all actual positives (tp + fn).

3.For NER, evaluating F1 is better than evaluating token accuracy, since the vast majority of tokens are not in a named entity.

(3) tageval.py
1.
Our evaluation works at the span level.
You have to get the name's span (interval of token positions) exactly correct in order for it to count. So if the gold standard says "President Barack Obama" is a one big name, and your tagger predicts "Barack Obama" as a name, our system doesn't give any partial credit and that counts as a false positive.

2.
https://docs.python.org/2/library/sys.html 
script - 脚本
sys - System-specific parameters and functions
This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available.

sys.argv
The list of command line arguments passed to a Python script. argv[0] is the script name (it is operating system dependent whether this is a full pathname or not). If the command was executed using the -c command line option to the interpreter, argv[0] is set to the string '-c'. If no script name was passed to the Python interpreter, argv[0] is the empty string.
To loop over the standard input, or the list of files given on the command line, see the fileinput module.
运行main，从第二个参数开始作为main的参数传入，argv第一个参数是默认的程序的名字，不需要输入的
/**********************************/
import sys

print "script name is", sys.argv[0]        

if len(sys.argv) > 1:
    print "there are", len(sys.argv)-1, "arguments:" 
    for arg in sys.argv[1:]:            
        print arg
else:
    print "there are no arguments!"
/**********************************/
outputs:
script name is /Users/Eamon___/Documents/workspace/PythonLearn1/src/Test1/__init__.py
there are no arguments!
/*********************************/
sys.stdin
sys.stdout
sys.stderr
File objects corresponding to the interpreter’s standard input, output and error streams. stdin is used for all interpreter input except for scripts but including calls to input() and raw_input(). stdout is used for the output of print and expression statements and for the prompts of input() and raw_input(). The interpreter’s own prompts and (almost all of) its error messages go to stderr. stdout and stderr needn’t be built-in file objects: any object is acceptable as long as it has a write() method that takes a string argument. (Changing these objects doesn’t affect the standard I/O streams of processes executed by os.popen(), os.system() or the exec*() family of functions in the os module.)

__future__ ― Future statement definitions
Source code: Lib/__future__.py
__future__ is a real module, and serves three purposes:
To avoid confusing existing tools that analyze import statements and expect to find the modules they’re importing.
To ensure that future statements run under releases prior to 2.1 at least yield runtime exceptions (the import of __future__ will fail, because there was no module of that name prior to 2.1).
To document when incompatible changes were introduced, and when they will be ― or were ― made mandatory. This is a form of executable documentation, and can be inspected programmatically via importing __future__ and examining its contents.

re ― Regular expression operations
This module provides regular expression matching operations similar to those found in Perl. Both patterns and strings to be searched can be Unicode strings as well as 8-bit strings.

3.
str.startswith(prefix[, start[, end]])
Return True if string starts with the prefix, otherwise return False. prefix can also be a tuple of prefixes to look for. With optional start, test string beginning at that position. With optional end, stop comparing string at that position.

4. ?
def check(spans):
    if spans[1] in ("B","I","O"):
        print("good")
    else:
        print("bad")
        
spans = ["Book", "OPT", "Lessons"]
check(spans)
“””
outputs: bad
“””

def check(spans):
    if spans[1] and spans[1][0] in ("B","I","O"):
    “””
    or (spans[1]) and (spans[1][0] in (“B”,”I”,”O”)
    or (spans[1] and spans[1][0]) in ("B","I","O"):
    “””
        print("good")
    else:
        print("bad")
        
spans = ["Book", "OPT", "Lessons"]
check(spans)
“””
outputs: good
“””

5.
def check(bio_sequence):
    spans = []  
    cur_start = None
    cur_label = None
    N = len(bio_sequence)
    for t in range(N):
        """
        if ((cur_start is not None) and
                (t==N or re.search("^[BO]", bio_sequence[t]))):
            assert cur_label is not None
            spans.append((cur_label, cur_start, t))
            cur_start = None
            cur_label = None
        if t==N: continue
        assert bio_sequence[t] and bio_sequence[t][0] in ("B","I","O")
        """
        if bio_sequence[t].startswith("B"):
            cur_start = t
            cur_label = re.sub("^B-?","", bio_sequence[t]).strip()
    return cur_label
        
bio_sequence = ["Boxing"]
print(check(bio_sequence))
“””
outputs: oxing
“””

def check(bio_sequence):
    spans = []  
    cur_start = None
    cur_label = None
    N = len(bio_sequence)
    for t in range(N+1):
        
        if ((cur_start is not None) and
                (t==N or re.search("^[BO]", bio_sequence[t]))):
            assert cur_label is not None
            spans.append((cur_label, cur_start, t))
            cur_start = None
            cur_label = None
        if t==N: continue
        assert bio_sequence[t] and bio_sequence[t][0] in ("B","I","O")
        
        if bio_sequence[t].startswith("B"):
            cur_start = t
            cur_label = re.sub("^B-?","", bio_sequence[t]).strip()
    return spans
        
bio_sequence = ["Boxing"]
print(check(bio_sequence))
“””
outputs: [('oxing', 0, 1)]
“””

def check(bio_sequence): 
    N = len(bio_sequence)
    for t in range(N):
        if re.search("^[BO]", bio_sequence[t]):
            print("good")
        else:
            print("bad")
        
bio_sequence = ["I", "B", "O"]
check(bio_sequence)
“”“
notes: The regular expression ^ means "find a start-of-line".
outputs: 
bad
good
good
”“”

(4) pred2kaggle.py
python pred2kaggle.py pretags > for_kaggle